# This workflow will install Python dependencies and run tests on
# windows and linux systems with a variety of Python versions

# For more information see:
# https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Automated Tests

on:
  push:
  pull_request:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *' # daily


jobs:
  build:
    strategy:
      matrix:
        python-version: ['3.12']
        os: ["ubuntu-latest"]
        ymlfile: ['environment.yml']
    name: Build py${{ matrix.python-version }} @ ${{ matrix.os }} 🐍
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 0

      # Replaced conda-incubator/setup-miniconda with mamba-org/setup-micromamba
      - uses: mamba-org/setup-micromamba@v1
        with:
          micromamba-version: 'latest' # Installs the latest version of micromamba
          environment-file: ${{ matrix.ymlfile }}
          environment-name: qa4sm_preprocessing # Name of the environment to create/activate
          init-shell: bash # Initialize for bash shells, so subsequent steps work
          cache-environment: true # Enable caching of the environment for faster builds
          post-cleanup: 'all' # Clean up micromamba installation files after the job

      - name: Print environment infos
        shell: bash -l {0} # The -l flag ensures the shell initialization from setup-micromamba is sourced
        run: |
          micromamba info -a # Use micromamba command
          micromamba list # Use micromamba command
          pip list
          which pip
          which python

      - name: Export Environment
        shell: bash -l {0}
        run: |
          mkdir -p artifacts
          if [ "${{ matrix.ymlfile }}" == "environment.yml" ] # Ensure correct string comparison
          then
              filename=env_py${{ matrix.python-version }}_${{ matrix.os }}.yml
              micromamba env export --name qa4sm_preprocessing --no-builds | grep -v "prefix" > artifacts/$filename # Use micromamba command and specify env name
          fi

      - name: Install package and test
        shell: bash -l {0}
        run: |
          pip install . # This should use the pip from the activated 'qa4sm_preprocessing' environment
          pytest

      - name: Upload Coverage
        shell: bash -l {0}
        run: |
          pip install coveralls && coveralls --service=github
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          COVERALLS_FLAG_NAME: ${{ matrix.python-version }}
          COVERALLS_PARALLEL: true
      - name: Create wheel and dist package
        shell: bash -l {0}
        run: |
          pip install setuptools_scm twine
          python setup.py sdist --dist-dir artifacts/dist
          python setup.py bdist_wheel --dist-dir artifacts/dist
          ls artifacts/dist
          twine check artifacts/dist/*
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Artifacts-py${{ matrix.python-version }}-${{ matrix.os }}
          path: artifacts/*
  coveralls:
    name: Submit Coveralls 👚
    needs: build
    runs-on: ubuntu-latest
    container: python:3-slim
    steps:
      - name: Finished
        run: |
          pip3 install --upgrade coveralls && coveralls --service=github --finish
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  publish:
    name: Upload to PyPI
    if: startsWith(github.ref, 'refs/tags/v') && startsWith(github.repository, 'awst-austria')
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Print environment variables
        run: |
          echo "GITHUB_REF = $GITHUB_REF"
          echo "GITHUB_REPOSITORY = $GITHUB_REPOSITORY"
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: Artifacts
          pattern: Artifacts-*
          merge-multiple: true
      - name: Display downloaded files
        run: ls -aR
      - name: Upload to PyPI
        uses: pypa/gh-action-pypi-publish@v1.4.1
        with:
          skip_existing: true
          verbose: true
          verify_metadata: true
          packages_dir: Artifacts/dist/
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }} # this needs to be uploaded to github actions secrets
